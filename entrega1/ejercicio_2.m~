%  Funcion que ejecuta las diferentes corridas que 
%   son necesarias para el ejercicio 2. 
%  Cada corrida con su variacion de parametros
%  es almacenada en el archivo resultados_2.csv
%   
%   D: matriz de datos, son las filas son los patrones y las columnas
%       menos la ultima son los atributos, siendo la ultima correspondiente
%       a la clase. 
%
%   Orden: puede poseer tres valores:
%          0: la clase no se ordena, se respeta el orden de las mezcla
%          1: la clase se ordena en orden ascendente.
%          2: la clase se intercala 
%

function[] = ejercicio_2(D, Orden)   

%Obtengo la dimensi?n de los datos
[CantFilas, CantCols] = size(D);
CantAtrib = CantCols - 1;
CantPatrones = CantFilas;
Clase = CantCols;

%Parametros inicializados
alfa = 0.3;
MAX_ITERA = 5;

%Hago 10 iteraciones independientes
for index = 1 : 10
    
    %Vector de pesos iniciados aleatoreamente entre 0 y 1
    W = rand(1,CantAtrib);     
    %Bias iniciado aleatoreamente entre 0 y 1
    b = rand;       

    % Mezclo los datos
    mezcla = randperm(CantPatrones); 
    M = D(mezcla,:);
    
    %Separo en 80/20 
    n = floor(CantPatrones*0.8);
    M_Train = M(1:n, :);
    M_Test = M((n+1):CantPatrones, :);
    
    
    if(Orden == 1)
        %Ordeno training
        M_Train = sortrows(M_Train, Clase);
    end
    if(Order == 2)
        %Intercalo
        Uno_indices = find(M_Train(:,clase) == 1);
        Cero_indices = find(M_Train(:,clase) == 0);
        E = zeros(size(M_Train));
        min_indices = min(length(Uno_indices), length(Cero_indices));
        %Indices impares van los unos
        E(1:2:(min_indices*2),:) = M_Train(Uno_indices(1:min_indices),:);
        %Indices pares van los ceros
        E(2:2:(min_indices*2),:) = M_Train(Cero_indices(1:min_indices),:);
        %El resto que queda
        if(length(Uno_indices) > length(Cero_indices))
            E((min_indices*2) + 1, end) = M_Train(Uno_indices(min_indices+1:end), end);
        else
            E((min_indices*2) + 1, end) = M_Train(Cero_indices(min_indices+1:end), end);
        end
        
        E
        
    end
    
    %Traspuesta
    M_Train = M_Train';
    M_Test = M_Test';
    
    %Separo la clase los atributos
    Patr_Train = M_Train(1:CantAtrib, :);
    Clase_Train = M_Train(Clase, :);

    %Separo la clase los atributos
    Patr_Test = M_Test(1:CantAtrib, :);
    Clase_Test = M_Test(Clase, :);
    
    
    %ordeno los datos
    %[valores, indices] = sort(Clase_Train, 2);
    %Clase_Train = Clase_Train(indices);
    %Patr_Train = Patr_Train(:, indices);
    %
    
    %alterno la clase
    %[valores, indices] = sort(Clase_Train, 2);
    %Clase_Train = Clase_Train(indices);
    %Patr_Train = Patr_Train(:, indices);
    %B = zeros(CantAtrib, n);
    
       
    [Wfinal, bfinal, itefinal] = perceptron(Patr_Train, Clase_Train, W, b, alfa, MAX_ITERA);
    
    [CantTrainCorrectos CantTrainIncorrectos] = evaluate(Patr_Train, Clase_Train, Wfinal, bfinal); 
    [CantTestCorrectos CantTestIncorrectos] = evaluate(Patr_Test, Clase_Test, Wfinal, bfinal);
    
    R(1,:) = [alfa itefinal CantTrainCorrectos CantTrainIncorrectos CantTestCorrectos CantTestIncorrectos];

    dlmwrite('resultados_2.csv',R,'-append');
end


    

